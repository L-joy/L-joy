(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{248:function(e,t,n){"use strict";n.r(t);var a=n(0),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"vue-js-day4"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue-js-day4"}},[e._v("#")]),e._v(" Vue.js - Day4")]),e._v(" "),n("h2",{attrs:{id:"父组件向子组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父组件向子组件传值"}},[e._v("#")]),e._v(" 父组件向子组件传值")]),e._v(" "),n("ol",[n("li",[e._v("组件实例定义方式，注意：一定要使用"),n("code",[e._v("props")]),e._v("属性来定义父组件传递过来的数据")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        msg: '这是父组件中的消息'\n      },\n      components: {\n        son: {\n          template: '<h1>这是子组件 --- {{finfo}}</h1>',\n          props: ['finfo']\n        }\n      }\n    });\n  <\/script>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("使用"),n("code",[e._v("v-bind")]),e._v("或简化指令，将数据传递到子组件中：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="app">\n    <son :finfo="msg"></son>\n  </div>\n')])])]),n("h2",{attrs:{id:"子组件向父组件传值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#子组件向父组件传值"}},[e._v("#")]),e._v(" 子组件向父组件传值")]),e._v(" "),n("ol",[n("li",[e._v("原理：父组件将方法的引用，传递到子组件内部，子组件在内部调用父组件传递过来的方法，同时把要发送给父组件的数据，在调用方法的时候当作参数传递进去；")]),e._v(" "),n("li",[e._v("父组件将方法的引用传递给子组件，其中，"),n("code",[e._v("getMsg")]),e._v("是父组件中"),n("code",[e._v("methods")]),e._v("中定义的方法名称，"),n("code",[e._v("func")]),e._v("是子组件调用传递过来方法时候的方法名称")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<son @func="getMsg"></son>\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("子组件内部通过"),n("code",[e._v("this.$emit('方法名', 要传递的数据)")]),e._v("方式，来调用父组件中的方法，同时把数据传递给父组件使用")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="app">\n    \x3c!-- 引用父组件 --\x3e\n    <son @func="getMsg"></son>\n\n    \x3c!-- 组件模板定义 --\x3e\n    <script type="x-template" id="son">\n      <div>\n        <input type="button" value="向父组件传值" @click="sendMsg" />\n      </div>\n    <\/script>\n  </div>\n\n  <script>\n    // 子组件的定义方式\n    Vue.component(\'son\', {\n      template: \'#son\', // 组件模板Id\n      methods: {\n        sendMsg() { // 按钮的点击事件\n          this.$emit(\'func\', \'OK\'); // 调用父组件传递过来的方法，同时把数据传递出去\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: \'#app\',\n      data: {},\n      methods: {\n        getMsg(val){ // 子组件中，通过 this.$emit() 实际调用的方法，在此进行定义\n          alert(val);\n        }\n      }\n    });\n  <\/script>\n')])])]),n("h2",{attrs:{id:"组件中data和props的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#组件中data和props的区别"}},[e._v("#")]),e._v(" 组件中data和props的区别")]),e._v(" "),n("h2",{attrs:{id:"评论列表案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#评论列表案例"}},[e._v("#")]),e._v(" 评论列表案例")]),e._v(" "),n("p",[e._v("目标：主要练习父子组件之间传值")]),e._v(" "),n("h2",{attrs:{id:"使用-this-refs-来获取元素和组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-this-refs-来获取元素和组件"}},[e._v("#")]),e._v(" 使用 "),n("code",[e._v("this.$refs")]),e._v(" 来获取元素和组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('  <div id="app">\n    <div>\n      <input type="button" value="获取元素内容" @click="getElement" />\n      \x3c!-- 使用 ref 获取元素 --\x3e\n      <h1 ref="myh1">这是一个大大的H1</h1>\n\n      <hr>\n      \x3c!-- 使用 ref 获取子组件 --\x3e\n      <my-com ref="mycom"></my-com>\n    </div>\n  </div>\n\n  <script>\n    Vue.component(\'my-com\', {\n      template: \'<h5>这是一个子组件</h5>\',\n      data() {\n        return {\n          name: \'子组件\'\n        }\n      }\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: \'#app\',\n      data: {},\n      methods: {\n        getElement() {\n          // 通过 this.$refs 来获取元素\n          console.log(this.$refs.myh1.innerText);\n          // 通过 this.$refs 来获取组件\n          console.log(this.$refs.mycom.name);\n        }\n      }\n    });\n  <\/script>\n')])])]),n("h2",{attrs:{id:"什么是路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#什么是路由"}},[e._v("#")]),e._v(" 什么是路由")]),e._v(" "),n("ol",[n("li",[n("p",[e._v("**后端路由：**对于普通的网站，所有的超链接都是URL地址，所有的URL地址都对应服务器上对应的资源；")])]),e._v(" "),n("li",[n("p",[e._v("**前端路由：**对于单页面应用程序来说，主要通过URL中的hash(#号)来实现不同页面之间的切换，同时，hash有一个特点：HTTP请求中不会包含hash相关的内容；所以，单页面程序中的页面跳转主要用hash实现；")])]),e._v(" "),n("li",[n("p",[e._v("在单页面应用程序中，这种通过hash改变来切换页面的方式，称作前端路由（区别于后端路由）；")])])]),e._v(" "),n("h2",{attrs:{id:"在-vue-中使用-vue-router"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在-vue-中使用-vue-router"}},[e._v("#")]),e._v(" 在 vue 中使用 vue-router")]),e._v(" "),n("ol",[n("li",[e._v("导入 vue-router 组件类库：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 1. 导入 vue-router 组件类库 --\x3e\n  <script src="./lib/vue-router-2.7.0.js"><\/script>\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("使用 router-link 组件来导航")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- 2. 使用 router-link 组件来导航 --\x3e\n<router-link to="/login">登录</router-link>\n<router-link to="/register">注册</router-link>\n')])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("使用 router-view 组件来显示匹配到的组件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!-- 3. 使用 router-view 组件来显示匹配到的组件 --\x3e\n<router-view></router-view>\n")])])]),n("ol",{attrs:{start:"4"}},[n("li",[e._v("创建使用"),n("code",[e._v("Vue.extend")]),e._v("创建组件")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    // 4.1 使用 Vue.extend 来创建登录组件\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    // 4.2 使用 Vue.extend 来创建注册组件\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n")])])]),n("ol",{attrs:{start:"5"}},[n("li",[e._v("创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 5. 创建一个路由 router 实例，通过 routers 属性来定义路由匹配规则\n    var router = new VueRouter({\n      routes: [\n        { path: '/login', component: login },\n        { path: '/register', component: register }\n      ]\n    });\n")])])]),n("ol",{attrs:{start:"6"}},[n("li",[e._v("使用 router 属性来使用路由规则")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 6. 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      router: router // 使用 router 属性来使用路由规则\n    });\n")])])]),n("h2",{attrs:{id:"使用tag属性指定router-link渲染的标签类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用tag属性指定router-link渲染的标签类型"}},[e._v("#")]),e._v(" 使用tag属性指定router-link渲染的标签类型")]),e._v(" "),n("h2",{attrs:{id:"设置路由重定向"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置路由重定向"}},[e._v("#")]),e._v(" 设置路由重定向")]),e._v(" "),n("h2",{attrs:{id:"设置路由高亮"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置路由高亮"}},[e._v("#")]),e._v(" 设置路由高亮")]),e._v(" "),n("h2",{attrs:{id:"设置路由切换动效"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#设置路由切换动效"}},[e._v("#")]),e._v(" 设置路由切换动效")]),e._v(" "),n("h2",{attrs:{id:"在路由规则中定义参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在路由规则中定义参数"}},[e._v("#")]),e._v(" 在路由规则中定义参数")]),e._v(" "),n("ol",[n("li",[e._v("在规则中定义参数：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("{ path: '/register/:id', component: register }\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("通过 "),n("code",[e._v("this.$route.params")]),e._v("来获取路由中的参数：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("var register = Vue.extend({\n      template: '<h1>注册组件 --- {{this.$route.params.id}}</h1>'\n    });\n")])])]),n("h2",{attrs:{id:"使用-children-属性实现路由嵌套"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-children-属性实现路由嵌套"}},[e._v("#")]),e._v(" 使用 "),n("code",[e._v("children")]),e._v(" 属性实现路由嵌套")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  <div id=\"app\">\n    <router-link to=\"/account\">Account</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    // 父路由中的组件\n    const account = Vue.extend({\n      template: `<div>\n        这是account组件\n        <router-link to=\"/account/login\">login</router-link> | \n        <router-link to=\"/account/register\">register</router-link>\n        <router-view></router-view>\n      </div>`\n    });\n\n    // 子路由中的 login 组件\n    const login = Vue.extend({\n      template: '<div>登录组件</div>'\n    });\n\n    // 子路由中的 register 组件\n    const register = Vue.extend({\n      template: '<div>注册组件</div>'\n    });\n\n    // 路由实例\n    var router = new VueRouter({\n      routes: [\n        { path: '/', redirect: '/account/login' }, // 使用 redirect 实现路由重定向\n        {\n          path: '/account',\n          component: account,\n          children: [ // 通过 children 数组属性，来实现路由的嵌套\n            { path: 'login', component: login }, // 注意，子路由的开头位置，不要加 / 路径符\n            { path: 'register', component: register }\n          ]\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      components: {\n        account\n      },\n      router: router\n    });\n  <\/script>\n")])])]),n("h2",{attrs:{id:"命名视图实现经典布局"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#命名视图实现经典布局"}},[e._v("#")]),e._v(" 命名视图实现经典布局")]),e._v(" "),n("ol",[n("li",[e._v("标签代码结构：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="app">\n    <router-view></router-view>\n    <div class="content">\n      <router-view name="a"></router-view>\n      <router-view name="b"></router-view>\n    </div>\n  </div>\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("JS代码：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<script>\n    var header = Vue.component('header', {\n      template: '<div class=\"header\">header</div>'\n    });\n\n    var sidebar = Vue.component('sidebar', {\n      template: '<div class=\"sidebar\">sidebar</div>'\n    });\n\n    var mainbox = Vue.component('mainbox', {\n      template: '<div class=\"mainbox\">mainbox</div>'\n    });\n\n    // 创建路由对象\n    var router = new VueRouter({\n      routes: [\n        {\n          path: '/', components: {\n            default: header,\n            a: sidebar,\n            b: mainbox\n          }\n        }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router\n    });\n  <\/script>\n")])])]),n("ol",{attrs:{start:"3"}},[n("li",[e._v("CSS 样式：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  <style>\n    .header {\n      border: 1px solid red;\n    }\n\n    .content{\n      display: flex;\n    }\n    .sidebar {\n      flex: 2;\n      border: 1px solid green;\n      height: 500px;\n    }\n    .mainbox{\n      flex: 8;\n      border: 1px solid blue;\n      height: 500px;\n    }\n  </style>\n")])])]),n("h2",{attrs:{id:"watch属性的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watch属性的使用"}},[e._v("#")]),e._v(" "),n("code",[e._v("watch")]),e._v("属性的使用")]),e._v(" "),n("p",[e._v("考虑一个问题：想要实现 "),n("code",[e._v("名")]),e._v(" 和 "),n("code",[e._v("姓")]),e._v(" 两个文本框的内容改变，则全名的文本框中的值也跟着改变；（用以前的知识如何实现？？？）")]),e._v(" "),n("ol",[n("li",[e._v("监听"),n("code",[e._v("data")]),e._v("中属性的改变：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div id=\"app\">\n    <input type=\"text\" v-model=\"firstName\"> +\n    <input type=\"text\" v-model=\"lastName\"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {\n        firstName: 'jack',\n        lastName: 'chen',\n        fullName: 'jack - chen'\n      },\n      methods: {},\n      watch: {\n        'firstName': function (newVal, oldVal) { // 第一个参数是新数据，第二个参数是旧数据\n          this.fullName = newVal + ' - ' + this.lastName;\n        },\n        'lastName': function (newVal, oldVal) {\n          this.fullName = this.firstName + ' - ' + newVal;\n        }\n      }\n    });\n  <\/script>\n")])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("监听路由对象的改变：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<div id=\"app\">\n    <router-link to=\"/login\">登录</router-link>\n    <router-link to=\"/register\">注册</router-link>\n\n    <router-view></router-view>\n  </div>\n\n  <script>\n    var login = Vue.extend({\n      template: '<h1>登录组件</h1>'\n    });\n\n    var register = Vue.extend({\n      template: '<h1>注册组件</h1>'\n    });\n\n    var router = new VueRouter({\n      routes: [\n        { path: \"/login\", component: login },\n        { path: \"/register\", component: register }\n      ]\n    });\n\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: '#app',\n      data: {},\n      methods: {},\n      router: router,\n      watch: {\n        '$route': function (newVal, oldVal) {\n          if (newVal.path === '/login') {\n            console.log('这是登录组件');\n          }\n        }\n      }\n    });\n  <\/script>\n")])])]),n("h2",{attrs:{id:"computed计算属性的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#computed计算属性的使用"}},[e._v("#")]),e._v(" "),n("code",[e._v("computed")]),e._v("计算属性的使用")]),e._v(" "),n("ol",[n("li",[e._v("默认只有"),n("code",[e._v("getter")]),e._v("的计算属性：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="app">\n    <input type="text" v-model="firstName"> +\n    <input type="text" v-model="lastName"> =\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: \'#app\',\n      data: {\n        firstName: \'jack\',\n        lastName: \'chen\'\n      },\n      methods: {},\n      computed: { // 计算属性； 特点：当计算属性中所以来的任何一个 data 属性改变之后，都会重新触发 本计算属性 的重新计算，从而更新 fullName 的值\n        fullName() {\n          return this.firstName + \' - \' + this.lastName;\n        }\n      }\n    });\n  <\/script>\n')])])]),n("ol",{attrs:{start:"2"}},[n("li",[e._v("定义有"),n("code",[e._v("getter")]),e._v("和"),n("code",[e._v("setter")]),e._v("的计算属性：")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<div id="app">\n    <input type="text" v-model="firstName">\n    <input type="text" v-model="lastName">\n    \x3c!-- 点击按钮重新为 计算属性 fullName 赋值 --\x3e\n    <input type="button" value="修改fullName" @click="changeName">\n\n    <span>{{fullName}}</span>\n  </div>\n\n  <script>\n    // 创建 Vue 实例，得到 ViewModel\n    var vm = new Vue({\n      el: \'#app\',\n      data: {\n        firstName: \'jack\',\n        lastName: \'chen\'\n      },\n      methods: {\n        changeName() {\n          this.fullName = \'TOM - chen2\';\n        }\n      },\n      computed: {\n        fullName: {\n          get: function () {\n            return this.firstName + \' - \' + this.lastName;\n          },\n          set: function (newVal) {\n            var parts = newVal.split(\' - \');\n            this.firstName = parts[0];\n            this.lastName = parts[1];\n          }\n        }\n      }\n    });\n  <\/script>\n')])])]),n("h2",{attrs:{id:"watch、computed和methods之间的对比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#watch、computed和methods之间的对比"}},[e._v("#")]),e._v(" "),n("code",[e._v("watch")]),e._v("、"),n("code",[e._v("computed")]),e._v("和"),n("code",[e._v("methods")]),e._v("之间的对比")]),e._v(" "),n("ol",[n("li",[n("code",[e._v("computed")]),e._v("属性的结果会被缓存，除非依赖的响应式属性变化才会重新计算。主要当作属性来使用；")]),e._v(" "),n("li",[n("code",[e._v("methods")]),e._v("方法表示一个具体的操作，主要书写业务逻辑；")]),e._v(" "),n("li",[n("code",[e._v("watch")]),e._v("一个对象，键是需要观察的表达式，值是对应回调函数。主要用来监听某些特定数据的变化，从而进行某些具体的业务逻辑操作；可以看作是"),n("code",[e._v("computed")]),e._v("和"),n("code",[e._v("methods")]),e._v("的结合体；")])]),e._v(" "),n("h2",{attrs:{id:"nrm的安装使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nrm的安装使用"}},[e._v("#")]),e._v(" "),n("code",[e._v("nrm")]),e._v("的安装使用")]),e._v(" "),n("p",[e._v("作用：提供了一些最常用的NPM包镜像地址，能够让我们快速的切换安装包时候的服务器地址；\n什么是镜像：原来包刚一开始是只存在于国外的NPM服务器，但是由于网络原因，经常访问不到，这时候，我们可以在国内，创建一个和官网完全一样的NPM服务器，只不过，数据都是从人家那里拿过来的，除此之外，使用方式完全一样；")]),e._v(" "),n("ol",[n("li",[e._v("运行"),n("code",[e._v("npm i nrm -g")]),e._v("全局安装"),n("code",[e._v("nrm")]),e._v("包；")]),e._v(" "),n("li",[e._v("使用"),n("code",[e._v("nrm ls")]),e._v("查看当前所有可用的镜像源地址以及当前所使用的镜像源地址；")]),e._v(" "),n("li",[e._v("使用"),n("code",[e._v("nrm use npm")]),e._v("或"),n("code",[e._v("nrm use taobao")]),e._v("切换不同的镜像源地址；")])]),e._v(" "),n("blockquote",[n("p",[e._v("注意： nrm 只是单纯的提供了几个常用的 下载包的 URL地址，并能够让我们在 这几个 地址之间，很方便的进行切换，但是，我们每次装包的时候，使用的 装包工具，都是  npm")])]),e._v(" "),n("h2",{attrs:{id:"相关文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#相关文件"}},[e._v("#")]),e._v(" 相关文件")]),e._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"http://www.cnblogs.com/joyho/articles/4430148.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("URL中的hash（井号）"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);